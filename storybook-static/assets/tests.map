{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/helpers/setup-router.js","dummy/tests/integration/components/denali-box-test.js","dummy/tests/integration/components/denali-breadcrumb-test.js","dummy/tests/integration/components/denali-button-test.js","dummy/tests/integration/components/denali-checkbox-test.js","dummy/tests/integration/components/denali-icon-test.js","dummy/tests/integration/components/denali-input-test.js","dummy/tests/integration/components/denali-link-test.js","dummy/tests/integration/components/denali-link-to-test.js","dummy/tests/integration/components/denali-loader-test.js","dummy/tests/integration/components/denali-menu-test.js","dummy/tests/integration/components/denali-menu/content-test.js","dummy/tests/integration/components/denali-menu/trigger-test.js","dummy/tests/integration/components/denali-modal-test.js","dummy/tests/integration/components/denali-navbar-test.js","dummy/tests/integration/components/denali-navbar/control-test.js","dummy/tests/integration/components/denali-navbar/icon-test.js","dummy/tests/integration/components/denali-navbar/item-test.js","dummy/tests/integration/components/denali-navbar/logo-test.js","dummy/tests/integration/components/denali-radio-test.js","dummy/tests/integration/components/denali-radio-toggle-test.js","dummy/tests/integration/components/denali-select-test.js","dummy/tests/integration/components/denali-switch-test.js","dummy/tests/integration/components/denali-tabs-test.js","dummy/tests/integration/components/denali-tabs/link-to-tab-test.js","dummy/tests/integration/components/denali-tabs/tab-test.js","dummy/tests/integration/components/denali-tag-test.js","dummy/tests/integration/components/denali-title-test.js","dummy/tests/integration/components/denali-title/heading-test.js","dummy/tests/integration/components/denali-toggle-test.js","dummy/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/helpers/setup-router\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function _default(hooks) {\n    hooks.beforeEach(function () {\n      const router = this.owner.lookup('router:main');\n      router.startRouting(true);\n    });\n  }\n});","define(\"dummy/tests/integration/components/denali-box-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-box', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliBox>\n              Inner Content\n            </DenaliBox>\n          \n      */\n      {\n        id: \"0IhjxMRG\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('div.box').hasText('Inner Content', 'DenaliBox exists and renders inner content');\n    });\n    (0, _qunit.test)('it can yield a header component', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliBox as |Box|>\n              <Box.Header>Header</Box.Header>\n            </DenaliBox>\n          \n      */\n      {\n        id: \"GvCrviQF\",\n        block: \"{\\\"symbols\\\":[\\\"Box\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Header\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Header\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.box h3').hasText('Header', 'DenaliBox can yield a header component');\n    });\n    (0, _qunit.test)('it can yield a sub header component', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliBox as |Box|>\n              <Box.SubHeader>Sub Header</Box.SubHeader>\n            </DenaliBox>\n          \n      */\n      {\n        id: \"Ib83l9xu\",\n        block: \"{\\\"symbols\\\":[\\\"Box\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"SubHeader\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Sub Header\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.box h5').hasText('Sub Header', 'DenaliBox can yield a sub header component');\n    });\n    (0, _qunit.test)('it can yield a footer component', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliBox as |Box|>\n              <Box.Footer>Footer</Box.Footer>\n            </DenaliBox>\n          \n      */\n      {\n        id: \"WsUxpSpn\",\n        block: \"{\\\"symbols\\\":[\\\"Box\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Footer\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Footer\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.box footer').hasText('Footer', 'DenaliBox can yield a footer component');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-breadcrumb-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-breadcrumb', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(3);\n      this.set('items', [1, 2, 3, 4]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliBreadcrumb\n              @items={{this.items}}\n              as | item |\n            >\n              <span class=\"link\">{{item}}</span>\n            </DenaliBreadcrumb>\n          \n      */\n      {\n        id: \"an9TsXVM\",\n        block: \"{\\\"symbols\\\":[\\\"item\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-breadcrumb\\\",[],[[\\\"@items\\\"],[[32,0,[\\\"items\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[10,\\\"span\\\"],[14,0,\\\"link\\\"],[12],[1,[32,1]],[13],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('ul.breadcrumb').exists('A ul with class breadcrumb is rendered');\n      assert.dom('.breadcrumb li').exists({\n        count: this.items.length\n      }, 'The number of li rendered equal the number of items passed through');\n      assert.dom('.breadcrumb .link').exists({\n        count: this.items.length\n      }, 'Each item is wrapped in a span as specified');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-button-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton>\n              Inner Content\n            </DenaliButton>\n          \n      */\n      {\n        id: \"t6MFYKsJ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('button.button').hasText('Inner Content', 'DenaliButton exists and renders inner content');\n    });\n    (0, _qunit.test)('it can be disabled', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton disabled={{this.isDisabled}}>\n              Inner Content\n            </DenaliButton>\n          \n      */\n      {\n        id: \"tFGsm9hY\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[[16,\\\"disabled\\\",[32,0,[\\\"isDisabled\\\"]]]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button').isNotDisabled('DenaliButton is not disabled by default');\n      this.set('isDisabled', true);\n      assert.dom('.button').isDisabled('DenaliButton can be disabled by setting the `disabled` attribute to true');\n    });\n    (0, _qunit.test)('it supports types', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton @type={{this.type}}>\n              Inner Content\n            </DenaliButton>\n          \n      */\n      {\n        id: \"Nt/rk7kI\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@type\\\"],[[32,0,[\\\"type\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button').hasAttribute('type', 'button', 'DenaliButton has a type of `button` by default');\n      this.set('type', 'submit');\n      assert.dom('.button').hasAttribute('type', 'submit', 'DenaliButton has a submit type when `type` arg is set to submit');\n    });\n    (0, _qunit.test)('it an be set active ', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton @isActive={{this.isActive}}>\n              Inner Content\n            </DenaliButton>\n          \n      */\n      {\n        id: \"RYqCfyEh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@isActive\\\"],[[32,0,[\\\"isActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button').doesNotHaveClass('is-active', 'DenaliButton is not active by default');\n      this.set('isActive', true);\n      assert.dom('.button').hasClass('is-active', 'DenaliButton can be set active by setting the `@isActive` arg to true');\n    });\n    (0, _qunit.test)('it supports styles', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton @style={{this.style}}>\n              Inner Content\n            </DenaliButton>\n          \n      */\n      {\n        id: \"ZpBv1HWL\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@style\\\"],[[32,0,[\\\"style\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button').hasClass('is-solid', 'DenaliButton has a solid style by default');\n      this.set('style', 'solid');\n      assert.dom('.button').hasClass('is-solid', 'DenaliButton has a solid style when `@style` arg is set to solid');\n      this.set('style', 'outline');\n      assert.dom('.button').hasClass('is-outline', 'DenaliButton has a outline style when `@style` arg is set to outline');\n      this.set('style', 'ghost');\n      assert.dom('.button').hasClass('is-ghost', 'DenaliButton has a ghost style when `@style` arg is set to ghost');\n      this.set('style', 'text');\n      assert.dom('.button').hasClass('is-text', 'DenaliButton has a text style when `@style` arg is set to text');\n      this.set('style', 'danger');\n      assert.dom('.button').hasClass('is-danger', 'DenaliButton has a danger style when `@style` arg is set to danger');\n    });\n    (0, _qunit.test)('it supports inverse colors', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton @isInverse={{this.isInverse}}>\n              Inner Content\n            </DenaliButton>\n          \n      */\n      {\n        id: \"ytWRFhtu\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button').doesNotHaveClass('is-inverse', 'DenaliButton does not have inverse styling by default');\n      this.set('isInverse', 'true');\n      assert.dom('.button').hasClass('is-inverse', 'DenaliButton has inverse styling when `@isInverse` arg is set to true');\n    });\n    (0, _qunit.test)('it supports sizes', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton @size={{this.size}}>\n              Inner Content\n            </DenaliButton>\n          \n      */\n      {\n        id: \"XF2nwcfA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button').exists('DenaliButton can render without a size set');\n      this.set('size', 'small');\n      assert.dom('.button').hasClass('is-small', 'DenaliButton has a small size when `@size` arg is set to small');\n      this.set('size', 'medium');\n      assert.dom('.button').hasClass('is-medium', 'DenaliButton has a medium size when `@size` arg is set to medium');\n      this.set('size', 'large');\n      assert.dom('.button').hasClass('is-large', 'DenaliButton has a large size when `@size` arg is set to large');\n      this.set('size', 'full');\n      assert.dom('.button').hasClass('is-full', 'DenaliButton has a full size when `@size` arg is set to full');\n    });\n    (0, _qunit.test)('it supports icons', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton @style=\"solid\" @icon={{this.icon}} @iconOnly={{this.iconOnly}}>\n              Share\n            </DenaliButton>\n          \n      */\n      {\n        id: \"mtEyfhtt\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@style\\\",\\\"@icon\\\",\\\"@iconOnly\\\"],[\\\"solid\\\",[32,0,[\\\"icon\\\"]],[32,0,[\\\"iconOnly\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Share\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button .d-icon').doesNotExist('No icon is rendered when none is specified');\n      assert.dom('.button').doesNotHaveClass('has-icon', 'DenaliButton does not have a `has-icon` class by default');\n      this.set('icon', 'share');\n      assert.dom('.button .d-icon').exists('DenaliButton renders an icon when specified');\n      assert.dom('.button .d-icon').hasClass('d-share', 'DenaliButton renders the specified icon');\n      assert.dom('.button').doesNotHaveClass('has-icon', 'DenaliButton does not have a `has-icon` class');\n      this.set('iconOnly', true);\n      assert.dom('.button').hasClass('has-icon', 'DenaliButton has a `has-icon` class when iconOnly arg is set to true');\n    });\n    (0, _qunit.test)('it supports loading', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliButton \n              @isLoading={{this.isLoading}} \n              @icon=\"save\"\n            >\n              Save\n            </DenaliButton>\n          \n      */\n      {\n        id: \"UTyeTiCB\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@isLoading\\\",\\\"@icon\\\"],[[32,0,[\\\"isLoading\\\"]],\\\"save\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Save\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.button').doesNotHaveClass('has-loader', 'DenaliButton does not have a `has-loader` class by default');\n      assert.dom('.button').hasText('Save', 'DenaliButton renders inner text by default');\n      assert.dom('.button .d-icon').exists('DenaliButton renders an icon when specified');\n      assert.dom('.button div.loader').doesNotExist('DenaliButton does render a loader by default');\n      this.set('isLoading', true);\n      assert.dom('.button').hasClass('has-loader', 'DenaliButton has `has-loader` class when `@isLoading` arg is true');\n      assert.dom('.button').hasNoText('DenaliButton does not render inner text when `@isLoading` arg is true');\n      assert.dom('.button .d-icon').doesNotExist('DenaliButton does not render an icon when `@isLoading` arg is true');\n      assert.dom('.button div.loader').exists('DenaliButton renders a loader when `@isLoading` arg is true');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-checkbox-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-checkbox', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(7);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliCheckbox\n              checked={{this.checked}}\n              disabled={{this.disabled}}\n              data-partial={{this.partialData}}\n            >\n              Test\n            </DenaliCheckbox>\n          \n      */\n      {\n        id: \"rfkBcWE0\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-checkbox\\\",[[16,\\\"checked\\\",[32,0,[\\\"checked\\\"]]],[16,\\\"disabled\\\",[32,0,[\\\"disabled\\\"]]],[16,\\\"data-partial\\\",[32,0,[\\\"partialData\\\"]]]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Test\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-checkbox').hasText('Test', 'A denali checkbox is rendered with the specified text');\n      assert.dom('.denali-checkbox input').isNotDisabled('The checkbox is not disabled by default');\n      assert.dom('.denali-checkbox input').isNotChecked('The checkbox is not checked by default');\n      assert.dom('.denali-checkbox input').doesNotHaveAttribute('data-partial', 'The checkbox does not have the data-partial attribute set by default');\n      this.set('partialData', true);\n      assert.dom('.denali-checkbox input').hasAttribute('data-partial', '', 'The checkbox has the data-partial attribute when set to true');\n      this.set('checked', true);\n      assert.dom('.denali-checkbox input').isChecked('The checkbox is checked when the checked attribute is set to true');\n      this.set('disabled', true);\n      assert.dom('.denali-checkbox input').isDisabled('The checkbox is disabled when the disabled attribute is set to true');\n    });\n    (0, _qunit.test)('action', async function (assert) {\n      assert.expect(4);\n      this.set('clickHandler', () => {\n        assert.ok('The click handler is called when checkbox is clicked');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliCheckbox\n              {{on 'click' (action this.clickHandler)}}\n            >\n              Test\n            </DenaliCheckbox>\n          \n      */\n      {\n        id: \"uZdVvoFp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-checkbox\\\",[[4,[38,1],[\\\"click\\\",[30,[36,0],[[32,0],[32,0,[\\\"clickHandler\\\"]]],null]],null]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Test\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"action\\\",\\\"on\\\"]}\",\n        meta: {}\n      }));\n      await (0, _testHelpers.click)('.denali-checkbox input');\n      assert.dom('.denali-checkbox input').isChecked('The checkbox is checked when clicked on');\n      await (0, _testHelpers.click)('.denali-checkbox label');\n      assert.dom('.denali-checkbox input').isNotChecked('The checkbox is unchecked when clicked again');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-icon-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-icon', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('icon', 'code');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliIcon\n              @icon={{this.icon}}\n            />\n          \n      */\n      {\n        id: \"uC8q2oga\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-icon\\\",[],[[\\\"@icon\\\"],[[32,0,[\\\"icon\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('i.d-icon.d-code').exists('DenaliIcon exists and has the correct icon class');\n      this.set('icon', 'bug');\n      assert.dom('i.d-icon.d-bug').exists('DenaliIcon exists and has the correct icon class');\n    });\n    (0, _qunit.test)('it supports sizes', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliIcon\n              @icon=\"code\"\n              @size={{this.size}}\n            >\n              Link Text\n            </DenaliIcon>\n          \n      */\n      {\n        id: \"7iPwaexT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-icon\\\",[],[[\\\"@icon\\\",\\\"@size\\\"],[\\\"code\\\",[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('size', 'extrasmall');\n      assert.dom('.d-icon').hasClass('is-extrasmall', 'DenaliIcon has a small size when `@size` arg is set to extrasmall');\n      this.set('size', 'small');\n      assert.dom('.d-icon').hasClass('is-small', 'DenaliIcon has a small size when `@size` arg is set to small');\n      this.set('size', 'medium');\n      assert.dom('.d-icon').hasClass('is-medium', 'DenaliIcon has a medium size when `@size` arg is set to medium');\n      this.set('size', 'large');\n      assert.dom('.d-icon').hasClass('is-large', 'DenaliIcon has a large size when `@size` arg is set to large');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-input-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-input', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(3);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput value=\"My Input\" />\n      */\n      {\n        id: \"lHMi4LYN\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[24,2,\\\"My Input\\\"]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.input input').exists('An input is rendered within a wrapper div with class `.input`');\n      assert.dom('.input input').isNotDisabled('The input is not disabled by default');\n      assert.dom('.input input').hasValue('My Input', 'The input has the specified value');\n    });\n    (0, _qunit.test)('input types', async function (assert) {\n      assert.expect(4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput type={{this.type}}/>\n      */\n      {\n        id: \"E49Y92IU\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[16,4,[32,0,[\\\"type\\\"]]]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('type', 'text');\n      assert.dom('.input input').hasAttribute('type', 'text', 'The input has the default type attribute text');\n      this.set('type', 'email');\n      assert.dom('.input input').hasAttribute('type', 'email', 'The input type attribute has the value email');\n      this.set('type', 'password');\n      assert.dom('.input input').hasAttribute('type', 'password', 'The input type attribute has the value password');\n      this.set('type', 'number');\n      assert.dom('.input input').hasAttribute('type', 'number', 'The input type attribute has the value number');\n    });\n    (0, _qunit.test)('input size', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput @size={{this.size}} />\n      */\n      {\n        id: \"pqlo4gRs\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('size', 'small');\n      assert.dom('.input').hasClass('is-small', 'The input wrapper has the appropriate class for small');\n      this.set('size', 'medium');\n      assert.dom('.input').hasClass('is-medium', 'The input wrapper has the appropriate class for medium');\n    });\n    (0, _qunit.test)('states', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput @state={{this.state}} />\n      */\n      {\n        id: \"C9YRkgGp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@state\\\"],[[32,0,[\\\"state\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('state', 'active');\n      assert.dom('.input').hasClass('is-active', 'The input wrapper has the appropriate class for active');\n      this.set('state', 'warning');\n      assert.dom('.input').hasClass('is-warning', 'The input wrapper has the appropriate class for warning');\n    });\n    (0, _qunit.test)('disabled', async function (assert) {\n      assert.expect(1);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput disabled={{true}}/>\n      */\n      {\n        id: \"5WImOJWQ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[16,\\\"disabled\\\",true]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.input input').isDisabled('The input is disabled when specified');\n    });\n    (0, _qunit.test)('placeholder', async function (assert) {\n      assert.expect(1);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput type=\"email\" placeholder=\"Email field\"/>\n      */\n      {\n        id: \"ZaiSA1xd\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[24,\\\"placeholder\\\",\\\"Email field\\\"],[24,4,\\\"email\\\"]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.input input').hasAttribute('placeholder', 'Email field', 'The input is has the specified placeholder');\n    });\n    (0, _qunit.test)('is inverse', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput @isInverse={{this.isInverse}} />\n      */\n      {\n        id: \"6xaiklyg\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.input').doesNotHaveClass('is-inverse', 'The input wrapper by default does not have the inverse class');\n      this.set('isInverse', 'true');\n      assert.dom('.input').hasClass('is-inverse', 'The input wrapper has the inverse class when specified');\n    });\n    (0, _qunit.test)('warning message', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput @state=\"warning\" @warningMsg={{this.warningMsg}} />\n      */\n      {\n        id: \"LyTYNU+P\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@state\\\",\\\"@warningMsg\\\"],[\\\"warning\\\",[32,0,[\\\"warningMsg\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.input.is-warning .message').hasNoText('No message is rendered when none is specified');\n      this.set('warningMsg', 'Email Invalid');\n      assert.dom('.input.is-warning .message').hasText('Email Invalid', 'The specified warning message is rendered');\n    });\n    (0, _qunit.test)('icons', async function (assert) {\n      assert.expect(6);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput\n            @iconFront={{this.iconFront}}\n            @iconFrontClass=\"front-icon\"\n            @iconBack={{this.iconBack}}\n            @iconBackClass=\"back-icon\"\n          />\n      */\n      {\n        id: \"srVnbqHv\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@iconFront\\\",\\\"@iconFrontClass\\\",\\\"@iconBack\\\",\\\"@iconBackClass\\\"],[[32,0,[\\\"iconFront\\\"]],\\\"front-icon\\\",[32,0,[\\\"iconBack\\\"]],\\\"back-icon\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.input.has-icon-front').doesNotExist('The icon-front class is not applied to the input when no front icon is specified');\n      assert.dom('.input.has-icon-back').doesNotExist('The icon-back class is not applied to the input when no back icon is specified');\n      this.set('iconFront', 'share');\n      assert.dom('.input.has-icon-front').exists('The icon-front class is applied to the input when front icon is specified');\n      assert.dom('.input.has-icon-front .front-icon').hasClass('d-share', 'The correct denali icon is rendered as the front icon');\n      this.set('iconBack', 'close-circle-solid');\n      assert.dom('.input.has-icon-back').exists('The icon-back class is applied to the input when back icon is specified');\n      assert.dom('.input.has-icon-back .back-icon').hasClass('d-close-circle-solid', 'The correct denali icon is rendered as the back icon');\n    });\n    (0, _qunit.test)('actions', async function (assert) {\n      assert.expect(2);\n      this.set('handleInput', event => {\n        assert.equal(event.target.value, 'Random Text', 'the action passed in configured correctly');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliInput\n            {{on 'input' (action this.handleInput)}}\n          />\n      */\n      {\n        id: \"lwMjG9na\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[4,[38,1],[\\\"input\\\",[30,[36,0],[[32,0],[32,0,[\\\"handleInput\\\"]]],null]],null]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"action\\\",\\\"on\\\"]}\",\n        meta: {}\n      }));\n      await (0, _testHelpers.fillIn)('.input input', 'Random Text');\n      this.set('handleInput', event => {\n        assert.equal(event.target.value, 'More Random Text', 'the action is configured correctly');\n      });\n      this.element.querySelector('.input input').value = 'More Random Text';\n      this.element.querySelector('.input input').dispatchEvent(new Event('input'));\n      await (0, _testHelpers.settled)();\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-link-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-link', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLink\n              href=\"https://denali.design/\"\n              target=\"_blank\"\n              @size={{this.size}}\n            >\n              Link Text\n            </DenaliLink>\n          \n      */\n      {\n        id: \"xC0VVetd\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[[24,6,\\\"https://denali.design/\\\"],[24,\\\"target\\\",\\\"_blank\\\"]],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').hasText('Link Text', 'DenaliLink renders an anchor element');\n      assert.dom('a.denali-link').hasAttribute('href', 'https://denali.design/', 'DenaliLink has the specified href');\n      assert.dom('a.denali-link').hasAttribute('target', '_blank', 'DenaliLink has the specified target');\n      assert.dom('a.denali-link').doesNotHaveClass('is-small', 'DenaliLink does not have the is-small class by default');\n      this.set('size', 'small');\n      assert.dom('a.denali-link').hasClass('is-small', 'DenaliLink has the is-small class when the size is set to small');\n    });\n    (0, _qunit.test)('secondary and sub links', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLink\n              @isSub={{this.sub}}\n              @isSecondary={{this.secondary}}\n            >\n              Link Text\n            </DenaliLink>\n      */\n      {\n        id: \"HiIpu6gG\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[],[[\\\"@isSub\\\",\\\"@isSecondary\\\"],[[32,0,[\\\"sub\\\"]],[32,0,[\\\"secondary\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('is-sub', 'DenaliLink by default is not a sub link');\n      assert.dom('a.denali-link').doesNotHaveClass('is-secondary', 'DenaliLink by default is not a secondary link');\n      this.set('sub', true);\n      assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLink is a sub link when isSub arg is set to true');\n      this.set('secondary', true);\n      assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLink retains the is-sub class');\n      assert.dom('a.denali-link').hasClass('is-secondary', 'DenaliLink is a secondary link when secondary arg is set to true');\n    });\n    (0, _qunit.test)('states', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLink\n              @state={{this.state}}\n            >\n              Link Text\n            </DenaliLink>\n          \n      */\n      {\n        id: \"KP6BCf63\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[],[[\\\"@state\\\"],[[32,0,[\\\"state\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('is-active', 'DenaliLink by default is not active');\n      assert.dom('a.denali-link').doesNotHaveClass('is-disabled', 'DenaliLink by default is not disabled');\n      this.set('state', 'active');\n      assert.dom('a.denali-link').hasClass('is-active', 'DenaliLink is active when state is set to active');\n      this.set('state', 'disabled');\n      assert.dom('a.denali-link').hasClass('is-disabled', 'DenaliLink is disabled when state is set to disabled');\n    });\n    (0, _qunit.test)('icons', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLink\n              @iconFront={{this.iconFront}}\n              @iconFrontClass={{this.iconFrontClass}}\n              @iconBack={{this.iconBack}}\n              @iconBackClass={{this.iconBackClass}}\n            >\n              Link Text\n            </DenaliLink>\n          \n      */\n      {\n        id: \"FIelm/bk\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[],[[\\\"@iconFront\\\",\\\"@iconFrontClass\\\",\\\"@iconBack\\\",\\\"@iconBackClass\\\"],[[32,0,[\\\"iconFront\\\"]],[32,0,[\\\"iconFrontClass\\\"]],[32,0,[\\\"iconBack\\\"]],[32,0,[\\\"iconBackClass\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('has-icon-front', 'DenaliLink does not have the `has-icon-front` class by default');\n      assert.dom('a.denali-link').doesNotHaveClass('has-icon-back', 'DenaliLink does not have the `has-icon-back` class by default');\n      this.set('iconFront', 'add-circle');\n      this.set('iconFrontClass', 'link-icon-front');\n      assert.dom('a.denali-link').hasClass('has-icon-front', 'DenaliLink has the `has-icon-front` class when iconFront is specified');\n      assert.dom('a.denali-link .d-icon.link-icon-front').hasClass('d-add-circle', 'DenaliLink has the specified icon in the front');\n      this.set('iconBack', 'external');\n      this.set('iconBackClass', 'link-icon-back');\n      assert.dom('a.denali-link').hasClass('has-icon-back', 'DenaliLink has the `has-icon-back` class when iconBack is specified');\n      assert.dom('a.denali-link .d-icon.link-icon-back').hasClass('d-external', 'DenaliLink has the specified icon in the back');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-link-to-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/setup-router\"], function (_qunit, _emberQunit, _testHelpers, _setupRouter) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-link-to', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupRouter.default)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLinkTo @route=\"index\" @query={{hash user=\"jkusa\"}}>\n              Link Text\n            </DenaliLinkTo>\n          \n      */\n      {\n        id: \"mBMeDRF5\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@query\\\"],[\\\"index\\\",[30,[36,0],null,[[\\\"user\\\"],[\\\"jkusa\\\"]]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"hash\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('a.ember-view').hasText('Link Text', 'DenaliLinkTo exists and renders inner content');\n      assert.dom('a.denali-link').hasAttribute('href', '/?user=jkusa', 'DenaliLinkTo renders an href based on a route & query');\n    });\n    (0, _qunit.test)('it is set as active when on current route', async function (assert) {\n      this.set('route', 'four-oh-four');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLinkTo @route={{this.route}}>\n              Link Text\n            </DenaliLinkTo>\n          \n      */\n      {\n        id: \"wjDvOX64\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\"],[[32,0,[\\\"route\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('is-active', 'DenaliLinkTo is not active when not on the current route');\n      this.set('route', 'index');\n      assert.dom('a.denali-link').hasClass('is-active', 'DenaliLinkTo is active when on the current route');\n    });\n    (0, _qunit.test)('size', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLinkTo\n              @route=\"four-oh-four\"\n              @size={{this.size}}\n            >\n              Link Text\n            </DenaliLinkTo>\n          \n      */\n      {\n        id: \"69K5KiSA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@size\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('is-small', 'DenaliLinkTo does not have the is-small class by default');\n      this.set('size', 'small');\n      assert.dom('a.denali-link').hasClass('is-small', 'DenaliLinkTo has the is-small class when the size is set to small');\n    });\n    (0, _qunit.test)('secondary and sub links', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLinkTo\n              @route=\"four-oh-four\"\n              @isSub={{this.sub}}\n              @isSecondary={{this.secondary}}\n            >\n              Link Text\n            </DenaliLinkTo>\n          \n      */\n      {\n        id: \"gp/FQ//z\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@isSub\\\",\\\"@isSecondary\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"sub\\\"]],[32,0,[\\\"secondary\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('is-sub', 'DenaliLinkTo by default is not a sub link');\n      assert.dom('a.denali-link').doesNotHaveClass('is-secondary', 'DenaliLinkTo by default is not a secondary link');\n      this.set('sub', true);\n      assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLinkTo is a sub link when isSub arg is set to true');\n      this.set('secondary', true);\n      assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLinkTo retains the is-sub class');\n      assert.dom('a.denali-link').hasClass('is-secondary', 'DenaliLinkTo is a secondary link when secondary arg is set to true');\n    });\n    (0, _qunit.test)('state', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLinkTo\n              @route=\"four-oh-four\"\n              @state={{this.state}}\n            >\n              Link Text\n            </DenaliLinkTo>\n          \n      */\n      {\n        id: \"0lXzxmez\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@state\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"state\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('is-disabled', 'DenaliLinkTo is not disabled by default');\n      this.set('state', 'disabled');\n      assert.dom('a.denali-link').hasClass('is-disabled', 'DenaliLinkTo is disabled when state is set to disabled');\n    });\n    (0, _qunit.test)('disabled', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLinkTo\n              @route=\"four-oh-four\"\n              @disabled={{this.disabled}}\n            >\n              Link Text\n            </DenaliLinkTo>\n          \n      */\n      {\n        id: \"PW4SJFsX\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@disabled\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('is-disabled', 'DenaliLinkTo is not disabled by default');\n      this.set('disabled', true);\n      assert.dom('a.denali-link').hasClass('is-disabled', 'DenaliLinkTo is disabled when disabled is set to true');\n    });\n    (0, _qunit.test)('icons', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLinkTo\n              @route=\"four-oh-four\"\n              @iconFront={{this.iconFront}}\n              @iconFrontClass={{this.iconFrontClass}}\n              @iconBack={{this.iconBack}}\n              @iconBackClass={{this.iconBackClass}}\n            >\n              Link Text\n            </DenaliLinkTo>\n          \n      */\n      {\n        id: \"BKzsc0Li\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@iconFront\\\",\\\"@iconFrontClass\\\",\\\"@iconBack\\\",\\\"@iconBackClass\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"iconFront\\\"]],[32,0,[\\\"iconFrontClass\\\"]],[32,0,[\\\"iconBack\\\"]],[32,0,[\\\"iconBackClass\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.denali-link').doesNotHaveClass('has-icon-front', 'DenaliLinkTo does not have the `has-icon-front` class by default');\n      assert.dom('a.denali-link').doesNotHaveClass('has-icon-back', 'DenaliLinkTo does not have the `has-icon-back` class by default');\n      this.set('iconFront', 'add-circle');\n      this.set('iconFrontClass', 'link-icon-front');\n      assert.dom('a.denali-link').hasClass('has-icon-front', 'DenaliLinkTo has the `has-icon-front` class when iconFront is specified');\n      assert.dom('a .d-icon.link-icon-front').hasClass('d-add-circle', 'DenaliLinkTo has the specified icon in the front');\n      this.set('iconBack', 'external');\n      this.set('iconBackClass', 'link-icon-back');\n      assert.dom('a.denali-link').hasClass('has-icon-back', 'DenaliLinkTo has the `has-icon-back` class when iconBack is specified');\n      assert.dom('a .d-icon.link-icon-back').hasClass('d-external', 'DenaliLinkTo has the specified icon in the back');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-loader-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-loader', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliLoader />\n      */\n      {\n        id: \"AJMvzw+x\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-loader\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('div.loader').exists('DenaliLoader can render.');\n    });\n    (0, _qunit.test)('it supports sizes', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLoader @size={{this.size}} />\n          \n      */\n      {\n        id: \"T+WIAvJO\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-loader\\\",[],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('size', 'extrasmall');\n      assert.dom('.loader').hasClass('is-extrasmall', 'DenaliLoader has an extrasmall size when `@size` arg is set to extrasmall');\n      this.set('size', 'small');\n      assert.dom('.loader').hasClass('is-small', 'DenaliLoader has a small size when `@size` arg is set to small');\n      this.set('size', 'medium');\n      assert.dom('.loader').hasClass('is-medium', 'DenaliLoader has a medium size when `@size` arg is set to medium');\n      this.set('size', 'large');\n      assert.dom('.loader').hasClass('is-large', 'DenaliLoader has a large size when `@size` arg is set to large');\n    });\n    (0, _qunit.test)('it supports inverse colors', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliLoader @isInverse={{this.isInverse}} />\n          \n      */\n      {\n        id: \"UY5rlCaF\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-loader\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.loader').doesNotHaveClass('is-inverse', 'DenaliLoader does not have inverse styling by default');\n      this.set('isInverse', 'true');\n      assert.dom('.loader').hasClass('is-inverse', 'DenaliLoader has inverse styling when `@isInverse` arg is set to true');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-menu-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-menu', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliMenu class=\"test-menu\" as |Menu|>\n              <Menu.Trigger>Hover</Menu.Trigger>\n              <Menu.Content>\n                <ul>\n                  <li>One</li>\n                  <li>Two</li>\n                  <li>Three</li>\n                </ul>\n              </Menu.Content>\n            </DenaliMenu>\n          \n      */\n      {\n        id: \"BQ7EtPuD\",\n        block: \"{\\\"symbols\\\":[\\\"Menu\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu\\\",[[24,0,\\\"test-menu\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Trigger\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Hover\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[10,\\\"ul\\\"],[12],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"One\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Two\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Three\\\"],[13],[2,\\\"\\\\n          \\\"],[13],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-menu').exists('The test menu is rendered');\n      assert.dom('.test-menu .menu-trigger').hasText('Hover', 'The trigger has the appropriate text');\n      assert.dom('.test-menu .menu-content li').exists({\n        count: 3\n      }, 'Three li elements are rendered in the menu content');\n      assert.dom('.test-menu .menu-content').hasStyle({\n        visibility: 'hidden'\n      }, 'The menu content is not visible by default');\n    });\n    (0, _qunit.test)('alignment', async function (assert) {\n      assert.expect(4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliMenu class=\"test-menu\" @alignContent={{this.alignContent}} as |Menu|>\n              <Menu.Trigger>Hover</Menu.Trigger>\n              <Menu.Content>\n                <ul>\n                  <li>One</li>\n                  <li>Two</li>\n                  <li>Three</li>\n                </ul>\n              </Menu.Content>\n            </DenaliMenu>\n          \n      */\n      {\n        id: \"PiCpA6N+\",\n        block: \"{\\\"symbols\\\":[\\\"Menu\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu\\\",[[24,0,\\\"test-menu\\\"]],[[\\\"@alignContent\\\"],[[32,0,[\\\"alignContent\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Trigger\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Hover\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[10,\\\"ul\\\"],[12],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"One\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Two\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Three\\\"],[13],[2,\\\"\\\\n          \\\"],[13],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-menu').doesNotHaveClass('is-left', 'The menu does not have the `is-left` class by default');\n      assert.dom('.test-menu').doesNotHaveClass('is-right', 'The menu does not have the `is-right` class by default');\n      this.set('alignContent', 'left');\n      assert.dom('.test-menu').hasClass('is-left', 'The menu has the `is-left` class when alignContent is set to left');\n      this.set('alignContent', 'right');\n      assert.dom('.test-menu').hasClass('is-right', 'The menu has the `is-right` class when alignContent is set to right');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-menu/content-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-menu/content', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliMenu::Content>\n              Inner Content\n            </DenaliMenu::Content>\n          \n      */\n      {\n        id: \"0XKkoajd\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu/content\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('div.menu-content').hasText('Inner Content', 'Menu content div is rendered');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-menu/trigger-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-menu/trigger', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(1);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliMenu::Trigger>\n              Trigger\n            </DenaliMenu::Trigger>\n          \n      */\n      {\n        id: \"L2+w9+IB\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu/trigger\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Trigger\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a.menu-trigger').hasText('Trigger', 'The trigger renders the text within an anchor tag');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-modal-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-modal', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(6);\n      this.set('isOpen', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliModal\n              class=\"denali-modal\"\n              @isOpen={{this.isOpen}}\n              @onClose={{fn (mut this.isOpen) false}}\n              as | Modal |\n            >\n              <Modal.Content @class=\"denali-modal__content\">Content</Modal.Content>\n            </DenaliModal>\n          \n      */\n      {\n        id: \"AdhmHfPC\",\n        block: \"{\\\"symbols\\\":[\\\"Modal\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-modal\\\",[[24,0,\\\"denali-modal\\\"]],[[\\\"@isOpen\\\",\\\"@onClose\\\"],[[32,0,[\\\"isOpen\\\"]],[30,[36,1],[[30,[36,0],[[32,0,[\\\"isOpen\\\"]]],null],false],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[\\\"@class\\\"],[\\\"denali-modal__content\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mut\\\",\\\"fn\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-modal.modal').doesNotExist('Denali Modal is hidden by default');\n      assert.dom('.denali-modal .modal').doesNotExist('Denali Modal is not rendered by default');\n      this.set('isOpen', true);\n      assert.dom('.denali-modal.modal').exists('Denali Modal is rendered only when isActive is set to true');\n      assert.dom('.denali-modal.modal .denali-modal__content').hasText('Content', 'Denali Modal Content is rendered in the modal');\n      assert.dom('.denali-modal.modal .close').exists('Denali Modal renders a close icon in the modal');\n      await (0, _testHelpers.click)('.denali-modal.modal .close');\n      assert.dom('.denali-modal.modal').doesNotExist('The Denali Modal is hidden when close is clicked');\n    });\n    (0, _qunit.test)('Full screen', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliModal\n              class=\"denali-modal\"\n              @isOpen={{true}}\n              @isFullScreen={{this.fullScreen}}\n              @onClose={{fn (mut this.isOpen) false}}\n              as | Modal |\n            >\n              <Modal.Content>Content</Modal.Content>\n            </DenaliModal>\n          \n      */\n      {\n        id: \"5FaDCe6m\",\n        block: \"{\\\"symbols\\\":[\\\"Modal\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-modal\\\",[[24,0,\\\"denali-modal\\\"]],[[\\\"@isOpen\\\",\\\"@isFullScreen\\\",\\\"@onClose\\\"],[true,[32,0,[\\\"fullScreen\\\"]],[30,[36,1],[[30,[36,0],[[32,0,[\\\"isOpen\\\"]]],null],false],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mut\\\",\\\"fn\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-modal .modal-container').doesNotHaveClass('.is-full', 'The modal container does not have the `is-full` class by default');\n      this.set('fullScreen', true);\n      assert.dom('.denali-modal .modal-container').hasClass('is-full', 'The modal container has the `is-full` when fullScreen arg is set to true');\n    });\n    (0, _qunit.test)('header and footer', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliModal\n              class=\"denali-modal\"\n              @isOpen={{true}}\n              @onClose={{fn (mut this.isOpen) false}}\n              as | Modal |\n            >\n              <Modal.Header @class=\"denali-modal__header\">Header</Modal.Header>\n              <Modal.Content>Content</Modal.Content>\n              <Modal.Footer @class=\"denali-modal__footer\">Footer</Modal.Footer>\n            </DenaliModal>\n          \n      */\n      {\n        id: \"XZEtwqRk\",\n        block: \"{\\\"symbols\\\":[\\\"Modal\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-modal\\\",[[24,0,\\\"denali-modal\\\"]],[[\\\"@isOpen\\\",\\\"@onClose\\\"],[true,[30,[36,1],[[30,[36,0],[[32,0,[\\\"isOpen\\\"]]],null],false],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Header\\\"]],[],[[\\\"@class\\\"],[\\\"denali-modal__header\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Header\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Footer\\\"]],[],[[\\\"@class\\\"],[\\\"denali-modal__footer\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Footer\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mut\\\",\\\"fn\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-modal__header').hasText('Header', 'Denali Modal header is rendered');\n      assert.dom('.denali-modal__footer').hasText('Footer', 'Denali Modal footer is rendered');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/setup-router\"], function (_qunit, _emberQunit, _testHelpers, _setupRouter) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-navbar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupRouter.default)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar\n              class=\"test-nav\"\n            >\n            </DenaliNavbar>\n          \n      */\n      {\n        id: \"SsQzQIOp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('nav.nav.test-nav').exists('DenaliNavbar exists and renders a nav element');\n    });\n    (0, _qunit.test)('it can support responsive', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar\n              class=\"test-nav\"\n              @isResponsive={{this.isResponsive}}\n              as |Nav|\n            >\n              <Nav.Left></Nav.Left>\n            </DenaliNavbar>\n          \n      */\n      {\n        id: \"Ox9XQE1f\",\n        block: \"{\\\"symbols\\\":[\\\"Nav\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[\\\"@isResponsive\\\"],[[32,0,[\\\"isResponsive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-nav .nav-left .nav-responsive-menu').doesNotExist('DenaliNavbar does not render a responsive menu button by default');\n      assert.dom('.test-nav.nav .nav-responsive').doesNotExist('DenaliNavbar does not render a responsive div by default');\n      this.set('isResponsive', true);\n      assert.dom('.test-nav .nav-left .nav-responsive-menu').exists('DenaliNavbar renders a responsive menu button when `@isResponsive` arg is true');\n      assert.dom('.test-nav.nav .nav-responsive').exists('DenaliNavbar renders a responsive div when `@isResponsive` arg is true');\n      assert.dom('.test-nav.nav .nav-responsive.is-active').doesNotExist('DenaliNavbar responsive div is not active default');\n      await (0, _testHelpers.click)('.test-nav .nav-responsive-menu');\n      assert.dom('.test-nav.nav .nav-responsive.is-active').exists('DenaliNavbar responsive div is toggled active when clicking the responsive menu');\n      await (0, _testHelpers.click)('.test-nav .nav-responsive-menu');\n      assert.dom('.test-nav.nav .nav-responsive.is-active').doesNotExist('DenaliNavbar responsive div is toggled inactive when clicking the responsive menu');\n    });\n    (0, _qunit.test)('it can yield left, center, & right section components', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar\n              class=\"test-nav\"\n              as |Nav|\n            >\n              <Nav.Left></Nav.Left>\n              <Nav.Center></Nav.Center>\n              <Nav.Right></Nav.Right>\n            </DenaliNavbar>\n          \n      */\n      {\n        id: \"BefI7qhd\",\n        block: \"{\\\"symbols\\\":[\\\"Nav\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Center\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Right\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-nav.nav .nav-left').exists('DenaliNavbar can yield a left section component');\n      assert.dom('.test-nav.nav .nav-center').exists('DenaliNavbar can yield a center section component');\n      assert.dom('.test-nav.nav .nav-right').exists('DenaliNavbar can yield a right section component');\n    });\n    (0, _qunit.test)('left can yield sub components', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar\n              class=\"test-nav\"\n              as |Nav|\n            >\n              <Nav.Left as |Section|>\n                <Section.Logo src=\"img.png\"/>\n                <Section.Item>\n                  Nav Item\n                </Section.Item>\n                <Section.Icon @icon=\"code\" />\n                <Section.Control>\n                  Nav Control\n                </Section.Control>\n                <Section.Link href=\"http://denali.design\" />\n                <Section.LinkTo @route=\"four-oh-four\" />\n              </Nav.Left>\n            </DenaliNavbar>\n          \n      */\n      {\n        id: \"C8cv5X78\",\n        block: \"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-nav .nav-left .nav-brand').hasAttribute('src', 'img.png', 'Left can yield a nav logo component');\n      assert.dom('.test-nav .nav-left .nav-item').hasText('Nav Item', 'Left can yield a nav item component');\n      assert.dom('.test-nav .nav-left .nav-icon .d-icon').hasClass('d-code', 'Left can yield a nav icon component');\n      assert.dom('.test-nav .nav-left .nav-control').hasText('Nav Control', 'Left can yield a nav control component');\n      assert.dom('.test-nav .nav-left a.nav-item').hasAttribute('href', 'http://denali.design', 'Left can yield a nav link component');\n      assert.dom('.test-nav .nav-left a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Left can yield a nav link-to component');\n    });\n    (0, _qunit.test)('left can yield sub components when `@isResponsive` is true', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar\n              class=\"test-nav\"\n              @isResponsive={{true}}\n              as |Nav|\n            >\n              <Nav.Left as |Section|>\n                <Section.Logo src=\"img.png\"/>\n                <Section.Item>\n                  Nav Item\n                </Section.Item>\n                <Section.Icon @icon=\"code\" />\n                <Section.Control>\n                  Nav Control\n                </Section.Control>\n                <Section.Link href=\"http://denali.design\" />\n                <Section.LinkTo @route=\"four-oh-four\" />\n              </Nav.Left>\n            </DenaliNavbar>\n          \n      */\n      {\n        id: \"Qy9Jy2M8\",\n        block: \"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[\\\"@isResponsive\\\"],[true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-nav .nav-left .nav-brand').hasAttribute('src', 'img.png', 'Left can yield a nav logo component');\n      assert.dom('.test-nav .nav-left .nav-item').hasText('Nav Item', 'Left can yield a nav item component');\n      assert.dom('.test-nav .nav-left .nav-icon .d-icon').hasClass('d-code', 'Left can yield a nav icon component');\n      assert.dom('.test-nav .nav-left .nav-control').hasText('Nav Control', 'Left can yield a nav control component');\n      assert.dom('.test-nav .nav-left a.nav-item').hasAttribute('href', 'http://denali.design', 'Left can yield a nav link component');\n      assert.dom('.test-nav .nav-left a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Left can yield a nav link-to component');\n    });\n    (0, _qunit.test)('center can yield sub components', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar\n              class=\"test-nav\"\n              as |Nav|\n            >\n              <Nav.Center as |Section|>\n                <Section.Logo src=\"img.png\"/>\n                <Section.Item>\n                  Nav Item\n                </Section.Item>\n                <Section.Icon @icon=\"code\" />\n                <Section.Control>\n                  Nav Control\n                </Section.Control>\n                <Section.Link href=\"http://denali.design\" />\n                <Section.LinkTo @route=\"four-oh-four\" />\n              </Nav.Center>\n            </DenaliNavbar>\n          \n      */\n      {\n        id: \"BurmFSL3\",\n        block: \"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Center\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-nav .nav-center .nav-brand').hasAttribute('src', 'img.png', 'Center can yield a nav logo component');\n      assert.dom('.test-nav .nav-center .nav-item').hasText('Nav Item', 'Center can yield a nav item component');\n      assert.dom('.test-nav .nav-center .nav-icon .d-icon').hasClass('d-code', 'Center can yield a nav icon component');\n      assert.dom('.test-nav .nav-center .nav-control').hasText('Nav Control', 'Center can yield a nav control component');\n      assert.dom('.test-nav .nav-center a.nav-item').hasAttribute('href', 'http://denali.design', 'Center can yield a nav link component');\n      assert.dom('.test-nav .nav-center a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Center can yield a nav link-to component');\n    });\n    (0, _qunit.test)('right can yield sub components', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar\n              class=\"test-nav\"\n              as |Nav|\n            >\n              <Nav.Right as |Section|>\n                <Section.Logo src=\"img.png\"/>\n                <Section.Item>\n                  Nav Item\n                </Section.Item>\n                <Section.Icon @icon=\"code\" />\n                <Section.Control>\n                  Nav Control\n                </Section.Control>\n                <Section.Link href=\"http://denali.design\" />\n                <Section.LinkTo @route=\"four-oh-four\" />\n              </Nav.Right>\n            </DenaliNavbar>\n          \n      */\n      {\n        id: \"A/SLMXvy\",\n        block: \"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Right\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.test-nav .nav-right .nav-brand').hasAttribute('src', 'img.png', 'Right can yield a nav logo component');\n      assert.dom('.test-nav .nav-right .nav-item').hasText('Nav Item', 'Right can yield a nav item component');\n      assert.dom('.test-nav .nav-right .nav-icon .d-icon').hasClass('d-code', 'Right can yield a nav icon component');\n      assert.dom('.test-nav .nav-right .nav-control').hasText('Nav Control', 'Right can yield a nav control component');\n      assert.dom('.test-nav .nav-right a.nav-item').hasAttribute('href', 'http://denali.design', 'Right can yield a nav link component');\n      assert.dom('.test-nav .nav-right a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Right can yield a nav link-to component');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/control-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/control', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar::Control>\n              Inner Content\n            </DenaliNavbar::Control>\n          \n      */\n      {\n        id: \"prwHmvN4\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/control\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('div.nav-control').hasText('Inner Content', 'DenaliNavbar::Control exists and renders inner content');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/icon-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/icon', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('icon', 'code');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar::Icon\n              @icon={{this.icon}}\n            />\n          \n      */\n      {\n        id: \"UvM2/al7\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/icon\\\",[],[[\\\"@icon\\\"],[[32,0,[\\\"icon\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.nav-icon .d-icon.d-code').exists('DenaliNavbar::Icon exists and has the correct icon class');\n      this.set('icon', 'bug');\n      assert.dom('.nav-icon .d-icon.d-bug').exists('DenaliNavbar::Icon exists and has the correct icon class');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/item-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar::Item>\n              Inner Content\n            </DenaliNavbar::Item>\n          \n      */\n      {\n        id: \"cw+xySuR\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/item\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.nav-item').hasText('Inner Content', 'DenaliNavbar::Item exists and renders inner content');\n    });\n    (0, _qunit.test)('it an be set active ', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliNavbar::Item\n              @isActive={{this.isActive}}\n            >\n              Inner Content\n            </DenaliNavbar::Item>\n          \n      */\n      {\n        id: \"sVWCsKjf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/item\\\",[],[[\\\"@isActive\\\"],[[32,0,[\\\"isActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.nav-item').doesNotHaveClass('is-active', 'DenaliNavbar::Item is not active by default');\n      this.set('isActive', true);\n      assert.dom('span.nav-item').hasClass('is-active', 'DenaliNavbar::Item is active when `@isActive` arg is true');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/logo-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/logo', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliNavbar::Logo @src=\"logo.png\"/>\n      */\n      {\n        id: \"LuzWpGOa\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-navbar/logo\\\",[],[[\\\"@src\\\"],[\\\"logo.png\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('img').hasClass('nav-brand', 'DenaliNavbar::Logo renders an img with the correct class');\n      assert.dom('img.nav-brand').hasAttribute('src', 'logo.png', 'DenaliNavbar::Logo renders src attr with the correct value');\n      assert.dom('img.nav-brand').hasAttribute('alt', 'logo', 'DenaliNavbar::Logo renders alt attr with the default value');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-radio-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-radio', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadio as |Radio|>\n              <Radio.Option @value=\"\">Inner Content</Radio.Option>\n            </DenaliRadio>\n          \n      */\n      {\n        id: \"qpLk9Hn8\",\n        block: \"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Inner Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('div.radio').exists({\n        count: 1\n      }, 'DenaliRadio Option exists');\n      assert.dom('div.radio').hasText('Inner Content', 'DenaliRadio Option renders inner content');\n    });\n    (0, _qunit.test)('handles change events', async function (assert) {\n      assert.expect(6);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadio @onChanged={{this.onChanged}} as |Radio|>\n              <Radio.Option @value={{1}}>1</Radio.Option>\n              <Radio.Option @value=\"surprise\">2</Radio.Option>\n              <Radio.Option @value={{3}}>3</Radio.Option>\n            </DenaliRadio>\n          \n      */\n      {\n        id: \"FO8o7JGU\",\n        block: \"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"surprise\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[3]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"3\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('onChanged', value => assert.equal(value, 3, 'the last value is clicked'));\n      await (0, _testHelpers.click)('.radio input[value=\"3\"]');\n      assert.dom('.radio input[value=\"3\"]').isChecked('true', 'The element is marked as checked after being clicked');\n      this.set('onChanged', value => assert.equal(value, 1, 'the first value is clicked'));\n      await (0, _testHelpers.click)('.radio input[value=\"1\"]');\n      assert.dom('.radio input[value=\"1\"]').isChecked('true', 'The element is marked as checked after being clicked');\n      this.set('onChanged', value => assert.equal(value, 'surprise', 'the middle value is clicked'));\n      await (0, _testHelpers.click)('.radio input[value=\"surprise\"]');\n      assert.dom('.radio input[value=\"surprise\"]').isChecked('The element is marked as checked after being clicked');\n    });\n    (0, _qunit.test)('disabled elements', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadio @onChanged={{this.onChanged}} as |Radio|>\n              <Radio.Option @value={{1}}>1</Radio.Option>\n              <Radio.Option @value=\"surprise\" @disabled={{true}}>2</Radio.Option>\n            </DenaliRadio>\n          \n      */\n      {\n        id: \"DiR5hZci\",\n        block: \"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.radio input[value=\"surprise\"]').hasAttribute('disabled', '', 'The element is marked as disabled');\n      this.set('onChanged', () => assert.notOk(true, 'the disabled value cannot be clicked'));\n      await (0, _testHelpers.click)('.radio input[value=\"surprise\"]');\n      assert.dom('.radio input[value=\"surprise\"]').isNotChecked('The disabled element is not marked as checked after being clicked');\n    });\n    (0, _qunit.test)('checked elements', async function (assert) {\n      assert.expect(6);\n      this.checked = false;\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadio as |Radio|>\n              <Radio.Option @value={{1}}>1</Radio.Option>\n              <Radio.Option @value={{2}} @checked={{this.checked}}>2</Radio.Option>\n              <Radio.Option @value=\"surprise\" @disabled={{true}}>2</Radio.Option>\n            </DenaliRadio>\n          \n      */\n      {\n        id: \"CwmAvA6q\",\n        block: \"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@checked\\\"],[2,[32,0,[\\\"checked\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.radio input[value=\"1\"]').isNotChecked('The option is not marked as checked');\n      assert.dom('.radio input[value=\"2\"]').isNotChecked('The option is not marked as checked');\n      assert.dom('.radio input[value=\"surprise\"]').isNotChecked('The option is not marked as checked');\n      this.set('checked', true);\n      assert.dom('.radio input[value=\"1\"]').isNotChecked('The option is still not marked as checked');\n      assert.dom('.radio input[value=\"2\"]').isChecked('The option is marked as checked after being set by attribute');\n      assert.dom('.radio input[value=\"surprise\"]').isNotChecked('The option is still not marked as checked');\n    });\n    (0, _qunit.test)('clicking label', async function (assert) {\n      assert.expect(3);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadio @onChanged={{this.onChanged}} as |Radio|>\n              <Radio.Option @value={{1}}>1</Radio.Option>\n            </DenaliRadio>\n          \n      */\n      {\n        id: \"OUIqnqGH\",\n        block: \"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('onChanged', value => assert.equal(value, 1, 'the event is triggered when clicking a label'));\n      assert.dom('.radio input').isNotChecked('The option is not marked as checked');\n      await (0, _testHelpers.click)('.radio label');\n      assert.dom('.radio input').isChecked('The option is marked as checked after clicking the label');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-radio-toggle-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-radio-toggle', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadioToggle as |Toggle|>\n              <Toggle.Option @value=\"1\">Item 1</Toggle.Option>\n            </DenaliRadioToggle>\n      */\n      {\n        id: \"O4Phug/6\",\n        block: \"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"1\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Item 1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('label').hasText('Item 1', 'DenaliRadioToggle.Option exists and renders inner content');\n      assert.dom('input').hasAttribute('value', '1', 'DenaliRadioToggle.Option exists and has a value');\n    });\n    (0, _qunit.test)('it handles change events for radio options', async function (assert) {\n      assert.expect(6);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadioToggle @onChanged={{this.onChanged}} as |Toggle|>\n              <Toggle.Option @value={{1}}>1</Toggle.Option>\n              <Toggle.Option @value=\"surprise\">2</Toggle.Option>\n              <Toggle.Option @value={{3}}>3</Toggle.Option>\n            </DenaliRadioToggle>\n          \n      */\n      {\n        id: \"M4gDSaa1\",\n        block: \"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"surprise\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[3]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"3\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('onChanged', value => assert.equal(value, 3, 'the last value is clicked'));\n      await (0, _testHelpers.click)('.toggle input[value=\"3\"]');\n      assert.dom('.toggle input[value=\"3\"]').isChecked('true', 'The element is marked as checked after being clicked');\n      this.set('onChanged', value => assert.equal(value, 1, 'the first value is clicked'));\n      await (0, _testHelpers.click)('.toggle input[value=\"1\"]');\n      assert.dom('.toggle input[value=\"1\"]').isChecked('true', 'The element is marked as checked after being clicked');\n      this.set('onChanged', value => assert.equal(value, 'surprise', 'the middle value is clicked'));\n      await (0, _testHelpers.click)('.toggle input[value=\"surprise\"]');\n      assert.dom('.toggle input[value=\"surprise\"]').isChecked('The element is marked as checked after being clicked');\n    });\n    (0, _qunit.test)('it handles disabled elements for radio options', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadioToggle @onChanged={{this.onChanged}} as |Toggle|>\n              <Toggle.Option @value={{1}}>1</Toggle.Option>\n              <Toggle.Option @value=\"surprise\" @disabled={{true}}>2</Toggle.Option>\n            </DenaliRadioToggle>\n          \n      */\n      {\n        id: \"lFwcRacx\",\n        block: \"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.toggle input[value=\"surprise\"]').hasAttribute('disabled', '', 'The element is marked as disabled');\n      this.set('onChanged', () => assert.notOk(true, 'the disabled value cannot be clicked'));\n      await (0, _testHelpers.click)('.toggle input[value=\"surprise\"]');\n      assert.dom('.toggle input[value=\"surprise\"]').isNotChecked('The disabled element is not marked as checked after being clicked');\n    });\n    (0, _qunit.test)('it handles checked elements for radio options', async function (assert) {\n      assert.expect(6);\n      this.checked = false;\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadioToggle as |Toggle|>\n              <Toggle.Option @value={{1}}>1</Toggle.Option>\n              <Toggle.Option @value={{2}} @checked={{this.checked}}>2</Toggle.Option>\n              <Toggle.Option @value=\"surprise\" @disabled={{true}}>2</Toggle.Option>\n            </DenaliRadioToggle>\n          \n      */\n      {\n        id: \"JwUSlL8k\",\n        block: \"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@checked\\\"],[2,[32,0,[\\\"checked\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.toggle input[value=\"1\"]').isNotChecked('The option is not marked as checked');\n      assert.dom('.toggle input[value=\"2\"]').isNotChecked('The option is not marked as checked');\n      assert.dom('.toggle input[value=\"surprise\"]').isNotChecked('The option is not marked as checked');\n      this.set('checked', true);\n      assert.dom('.toggle input[value=\"1\"]').isNotChecked('The option is still not marked as checked');\n      assert.dom('.toggle input[value=\"2\"]').isChecked('The option is marked as checked after being set by attribute');\n      assert.dom('.toggle input[value=\"surprise\"]').isNotChecked('The option is still not marked as checked');\n    });\n    (0, _qunit.test)('it handles clicking labels for radio options', async function (assert) {\n      assert.expect(3);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadioToggle @onChanged={{this.onChanged}} as |Toggle|>\n              <Toggle.Option @value={{1}}>1</Toggle.Option>\n            </DenaliRadioToggle>\n          \n      */\n      {\n        id: \"QbyGDWKL\",\n        block: \"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('onChanged', value => assert.equal(value, 1, 'the event is triggered when clicking a label'));\n      assert.dom('.toggle input').isNotChecked('The option is not marked as checked');\n      await (0, _testHelpers.click)('.toggle label');\n      assert.dom('.toggle input').isChecked('The option is marked as checked after clicking the label');\n    });\n    (0, _qunit.test)('it supports small size', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadioToggle @isSmall={{this.isSmall}} as |Toggle|>\n              <Toggle.Option @value={{1}}>Item 1</Toggle.Option>\n            </DenaliRadioToggle>\n          \n      */\n      {\n        id: \"dpnU1EQH\",\n        block: \"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@isSmall\\\"],[[32,0,[\\\"isSmall\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Item 1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.toggle').doesNotHaveClass('is-small', 'DenaliToggle does not have small styling by default');\n      this.set('isSmall', 'true');\n      assert.dom('.toggle').hasClass('is-small', 'DenaliToggle has a small size when `@isSmall` arg is set to true');\n    });\n    (0, _qunit.test)('it supports inverse colors', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliRadioToggle @isInverse={{this.isInverse}} as |Toggle|>\n              <Toggle.Option @value={{1}}>Item 1</Toggle.Option>\n            </DenaliRadioToggle>\n          \n      */\n      {\n        id: \"a69DkjVz\",\n        block: \"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Item 1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.toggle').doesNotHaveClass('is-inverse', 'DenaliToggle does not have inverse styling by default');\n      this.set('isInverse', 'true');\n      assert.dom('.toggle').hasClass('is-inverse', 'DenaliToggle has inverse styling when `@isInverse` arg is set to true');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-select-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const opts = [{\n    text: 'Item 1'\n  }, {\n    text: 'Item 2'\n  }, {\n    text: 'Item 3'\n  }];\n  (0, _qunit.module)('Integration | Component | denali-select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it requires options', async function (assert) {\n      assert.expect(1);\n      (0, _testHelpers.setupOnerror)(function ({\n        message\n      }) {\n        assert.equal(message, 'Failed prop type: The prop `options` is marked as required in `DenaliSelectComponent`, but its value is `undefined`.', 'If @args() contains a PropType validator, an error will be thrown if the value is incorrect');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliSelect />\n      */\n      {\n        id: \"Twl/vb1l\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-select\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n    });\n    (0, _qunit.test)('it renders an option string', async function (assert) {\n      assert.expect(3);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliSelect @options={{array \"Item 1\"}} @onChange={{this.onChange}} as |option|>\n              {{option}}\n            </DenaliSelect>\n          \n      */\n      {\n        id: \"q2dz6w/e\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@onChange\\\"],[[30,[36,0],[\\\"Item 1\\\"],null],[32,0,[\\\"onChange\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"array\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('div.input.has-arrow').exists('DenaliSelect renders an wrapper div');\n      assert.dom('div.input select').exists('DenaliSelect renders a select element.');\n      assert.dom('div.input option').hasText('Item 1', 'DenaliSelect option exists and renders text.');\n    });\n    (0, _qunit.test)('it renders an option object', async function (assert) {\n      assert.expect(3);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliSelect @options={{array (hash text=\"Item 1\")}} as |option|>\n              {{option.text}}\n            </DenaliSelect>\n          \n      */\n      {\n        id: \"Yy1oNePP\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\"],[[30,[36,1],[[30,[36,0],null,[[\\\"text\\\"],[\\\"Item 1\\\"]]]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"hash\\\",\\\"array\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('div.input.has-arrow').exists('DenaliSelect renders an wrapper div');\n      assert.dom('div.input select').exists('DenaliSelect renders a select element.');\n      assert.dom('div.input option').hasText('Item 1', 'DenaliSelect option exists and renders an object.');\n    });\n    (0, _qunit.test)('an option is active', async function (assert) {\n      assert.expect(1);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliSelect @options={{this.options}} @selectedOption={{this.selectedOption}} as |option|>\n              {{option.text}}\n            </DenaliSelect>\n          \n      */\n      {\n        id: \"xImrGvJi\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@selectedOption\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"selectedOption\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', opts);\n      this.set('selectedOption', opts[1]);\n      assert.equal((0, _testHelpers.find)('div.input select').selectedIndex, 1, 'DenaliSelect selects the object given by the `@selectedOption` arg');\n    });\n    (0, _qunit.test)('an option is disabled', async function (assert) {\n      assert.expect(1);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliSelect @options={{this.options}} @disabledOptions={{this.disabled}} as |option|>\n              {{option.text}}\n            </DenaliSelect>\n          \n      */\n      {\n        id: \"thexireZ\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@disabledOptions\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', opts);\n      this.set('disabled', [opts[1]]);\n      assert.deepEqual((0, _testHelpers.findAll)('div.input option').map(e => e.disabled), [false, true, false], 'DenaliSelect options are enabled and disabled as specified.');\n    });\n    (0, _qunit.test)('it supports small size', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliSelect @options={{this.options}} @isSmall={{this.isSmall}} as |option|>\n              {{option.text}}\n            </DenaliSelect>\n          \n      */\n      {\n        id: \"k7Pjl20c\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@isSmall\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"isSmall\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', opts);\n      assert.dom('div.input').doesNotHaveClass('is-small', 'DenaliSelect does not have small styling by default');\n      this.set('isSmall', 'true');\n      assert.dom('div.input').hasClass('is-small', 'DenaliSelect has a small size when `@isSmall` arg is set to true');\n    });\n    (0, _qunit.test)('it supports inverse colors', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliSelect @options={{this.options}} @isInverse={{this.isInverse}} as |option|>\n              {{option.text}}\n            </DenaliSelect>\n          \n      */\n      {\n        id: \"Fb4qNbCs\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@isInverse\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', opts);\n      assert.dom('div.input').doesNotHaveClass('is-inverse', 'DenaliSelect does not have inverse styling by default');\n      this.set('isInverse', 'true');\n      assert.dom('div.input').hasClass('is-inverse', 'DenaliSelect has inverse styling when `@isInverse` arg is set to true');\n    });\n    (0, _qunit.test)('it handles change events', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliSelect\n              @options={{this.options}}\n              @selectedOption={{this.selectedOption}}\n              @disabledOptions={{this.disabled}}\n              @onChange={{this.onChange}} as |option|>\n              {{option.text}}\n            </DenaliSelect>\n          \n      */\n      {\n        id: \"V7E9T2xu\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@selectedOption\\\",\\\"@disabledOptions\\\",\\\"@onChange\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"selectedOption\\\"]],[32,0,[\\\"disabled\\\"]],[32,0,[\\\"onChange\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', [{\n        text: 'Item 1'\n      }, {\n        text: 'Item 2'\n      }, {\n        text: 'Item 3'\n      }]);\n      this.set('selectedOption', this.options[2]);\n      assert.equal((0, _testHelpers.find)('div.input select').selectedIndex, 2);\n      this.set('onChange', option => {\n        this.set('selectedOption', option);\n        assert.equal(option, this.options[1], 'DenaliSelect @onChange action provides the object selected');\n      });\n      await (0, _testHelpers.fillIn)('div.input select', 'Item 2');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-switch-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-switch', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliSwitch @offLabel=\"Lights Off\" @onLabel=\"Lights On\" />\n      */\n      {\n        id: \"CEeg5ZhH\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[],[[\\\"@offLabel\\\",\\\"@onLabel\\\"],[\\\"Lights Off\\\",\\\"Lights On\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-switch.switch').exists('A denali switch component is rendered');\n      assert.dom('.denali-switch.switch .label.off').hasText('Lights Off', 'A denali switch renders an off label');\n      assert.dom('.denali-switch.switch .label.on').hasText('Lights On', 'A denali switch renders an on label');\n      assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n    });\n    (0, _qunit.test)('checked and disabled', async function (assert) {\n      assert.expect(4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliSwitch\n            @offLabel=\"Off\"\n            @onLabel=\"On\"\n            checked={{this.checked}}\n            disabled={{this.disabled}}\n          />\n      */\n      {\n        id: \"vSa4Pp8z\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[[16,\\\"checked\\\",[32,0,[\\\"checked\\\"]]],[16,\\\"disabled\\\",[32,0,[\\\"disabled\\\"]]]],[[\\\"@offLabel\\\",\\\"@onLabel\\\"],[\\\"Off\\\",\\\"On\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n      this.set('checked', true);\n      assert.dom('.denali-switch.switch input').isChecked('The switch is on when checked is set to true');\n      assert.dom('.denali-switch.switch input').isNotDisabled('The switch is not disabled by default');\n      this.set('disabled', true);\n      assert.dom('.denali-switch.switch input').isDisabled('The switch is disabled when disabled is set to true');\n    });\n    (0, _qunit.test)('isEnabled and isDisabled', async function (assert) {\n      assert.expect(4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliSwitch\n            @offLabel=\"Off\"\n            @onLabel=\"On\"\n            @isEnabled={{this.isEnabled}}\n            @isDisabled={{this.isDisabled}}\n          />\n      */\n      {\n        id: \"541Z9DZu\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[],[[\\\"@offLabel\\\",\\\"@onLabel\\\",\\\"@isEnabled\\\",\\\"@isDisabled\\\"],[\\\"Off\\\",\\\"On\\\",[32,0,[\\\"isEnabled\\\"]],[32,0,[\\\"isDisabled\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n      this.set('isEnabled', true);\n      assert.dom('.denali-switch.switch input').isChecked('The switch is on when isEnabled is set to true');\n      assert.dom('.denali-switch.switch input').isNotDisabled('The switch is not disabled by default');\n      this.set('isDisabled', true);\n      assert.dom('.denali-switch.switch input').isDisabled('The switch is disabled when isDisabled is set to true');\n    });\n    (0, _qunit.test)('click and onChange action', async function (assert) {\n      assert.expect(7);\n      this.set('clickHandler', () => {\n        assert.ok('Click handler is called on click');\n      });\n      this.set('changeHandler', () => {\n        assert.ok('Change handler is called on click');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliSwitch\n            @offLabel=\"Off\"\n            @onLabel=\"On\"\n            @onChange={{action this.changeHandler}}\n            {{on \"click\" (action this.clickHandler)}}\n          />\n      */\n      {\n        id: \"/AGB9oyM\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[[4,[38,1],[\\\"click\\\",[30,[36,0],[[32,0],[32,0,[\\\"clickHandler\\\"]]],null]],null]],[[\\\"@offLabel\\\",\\\"@onLabel\\\",\\\"@onChange\\\"],[\\\"Off\\\",\\\"On\\\",[30,[36,0],[[32,0],[32,0,[\\\"changeHandler\\\"]]],null]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"action\\\",\\\"on\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n      await (0, _testHelpers.click)('.denali-switch input');\n      assert.dom('.denali-switch.switch input').isChecked('The switch is on after click');\n      await (0, _testHelpers.click)('.denali-switch input');\n      assert.dom('.denali-switch.switch input').isNotChecked('Clicking again turns the switch off');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-tabs-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-tabs', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs>\n              Inner Content\n            </DenaliTabs>\n          \n      */\n      {\n        id: \"2OaR0VKz\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('div.tabs ul').hasText('Inner Content', 'DenaliTabs exists and renders inner content');\n    });\n    (0, _qunit.test)('it supports styles', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs\n              @style={{this.style}}\n            >\n              Inner Content\n            </DenaliTabs>\n          \n      */\n      {\n        id: \"JYFm9YEE\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[\\\"@style\\\"],[[32,0,[\\\"style\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.tabs').hasClass('is-primary', 'DenaliTabs renders a primary style by default');\n      this.set('style', 'secondary');\n      assert.dom('.tabs').hasClass('is-secondary', 'DenaliTabs renders a secondary style by setting `@style` arg to secondary');\n    });\n    (0, _qunit.test)('it supports alignment', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs\n              @alignment={{this.alignment}}\n            >\n              Inner Content\n            </DenaliTabs>\n          \n      */\n      {\n        id: \"orSnB54d\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[\\\"@alignment\\\"],[[32,0,[\\\"alignment\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.tabs').hasClass('is-horizontal', 'DenaliTabs renders a horizontal alignment by default');\n      this.set('alignment', 'vertical');\n      assert.dom('.tabs').hasClass('is-vertical', 'DenaliTabs renders a vertical alignment by setting `@alignment` arg to vertical');\n    });\n    (0, _qunit.test)('it can yield a `Tab` sub component', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs as |Tabs|>\n              <Tabs.Tab>\n                The Greatest Tab\n              </Tabs.Tab>\n            </DenaliTabs>\n          \n      */\n      {\n        id: \"dlSfOFWb\",\n        block: \"{\\\"symbols\\\":[\\\"Tabs\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Tab\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          The Greatest Tab\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.tabs li span').hasText('The Greatest Tab', 'DenaliTabs can yield a `Tab` sub component');\n    });\n    (0, _qunit.test)('it can yield a `LinkToTab` sub component', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs as |Tabs|>\n              <Tabs.LinkToTab\n                @route=\"/\"\n              >\n                The Greatest Tab\n              </Tabs.LinkToTab>\n            </DenaliTabs>\n          \n      */\n      {\n        id: \"wTu1Xays\",\n        block: \"{\\\"symbols\\\":[\\\"Tabs\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"LinkToTab\\\"]],[],[[\\\"@route\\\"],[\\\"/\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          The Greatest Tab\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.tabs li.ember-view a').hasText('The Greatest Tab', 'DenaliTabs can yield a `LinkToTab` sub component');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-tabs/link-to-tab-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/setup-router\"], function (_qunit, _emberQunit, _testHelpers, _setupRouter) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-tabs/link-to-tab', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupRouter.default)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs::LinkToTab\n              @route=\"four-oh-four\"\n            >\n              Inner Content\n            </DenaliTabs::LinkToTab>\n          \n      */\n      {\n        id: \"zP7i78ah\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/link-to-tab\\\",[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('li a').hasText('Inner Content', 'DenaliTabs::LinkToTab exists and renders Inner Content');\n      assert.dom('li a').hasAttribute('href', '/four-oh-four', 'DenaliTabs::LinkToTab has correct href attribute for given LinkTo arg');\n    });\n    (0, _qunit.test)('it can be set active', async function (assert) {\n      this.set('route', 'four-oh-four');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs::LinkToTab\n              @route={{this.route}}\n            >\n              Inner Content\n            </DenaliTabs::LinkToTab>\n          \n      */\n      {\n        id: \"N6iB7HWS\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/link-to-tab\\\",[],[[\\\"@route\\\"],[[32,0,[\\\"route\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('li').doesNotHaveClass('is-active', 'DenaliTabs::LinkToTab is not active when not on the current route');\n      this.set('route', 'index');\n      assert.dom('li').hasClass('is-active', 'DenaliTabs::LinkToTab is active when on the current route');\n    });\n    (0, _qunit.test)('it can be set disabled', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs::LinkToTab\n              @route=\"four-oh-four\"\n              @disabled={{this.disabled}}\n            >\n              Inner Content\n            </DenaliTabs::LinkToTab>\n          \n      */\n      {\n        id: \"IUx8crIW\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/link-to-tab\\\",[],[[\\\"@route\\\",\\\"@disabled\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('li').doesNotHaveClass('is-disabled', 'DenaliTabs::LinkToTab is not disabled by default');\n      this.set('disabled', true);\n      assert.dom('li').hasClass('is-disabled', 'DenaliTabs::LinkToTab is disabled when disabled is set to true');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-tabs/tab-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-tabs/tab', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs::Tab>\n              Inner Content\n            </DenaliTabs::Tab>\n          \n      */\n      {\n        id: \"PJd9Hi85\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/tab\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('li span').hasText('Inner Content', 'DenaliTabs::Tab exists and renders inner content');\n    });\n    (0, _qunit.test)('it can be set active', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs::Tab\n              @isActive={{this.isActive}}\n            >\n              Inner Content\n            </DenaliTabs::Tab>\n          \n      */\n      {\n        id: \"BO5uDAWO\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/tab\\\",[],[[\\\"@isActive\\\"],[[32,0,[\\\"isActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('li').doesNotHaveClass('is-active', 'DenaliTabs::Tab is not active by default');\n      this.set('isActive', true);\n      assert.dom('li').hasClass('is-active', 'DenaliTabs::Tab is active when setting `@isActive` arg to true');\n    });\n    (0, _qunit.test)('it can be set disabled', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTabs::Tab\n              @isDisabled={{this.isDisabled}}\n            >\n              Inner Content\n            </DenaliTabs::Tab>\n          \n      */\n      {\n        id: \"ItwKFkqj\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/tab\\\",[],[[\\\"@isDisabled\\\"],[[32,0,[\\\"isDisabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('li').doesNotHaveClass('is-disabled', 'DenaliTabs::Tab is not disabled by default');\n      this.set('isDisabled', true);\n      assert.dom('li').hasClass('is-disabled', 'DenaliTabs::Tab is active when setting `@isDisabled` arg to true');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-tag-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-tag', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTag>\n              Inner Content\n            </DenaliTag>\n          \n      */\n      {\n        id: \"kuDYlkHS\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.tag').hasText('Inner Content', 'DenaliTag exists and renders inner content');\n    });\n    (0, _qunit.test)('states', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTag @state={{this.state}}>\n              Inner Content\n            </DenaliTag>\n          \n      */\n      {\n        id: \"ahjtebqo\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@state\\\"],[[32,0,[\\\"state\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.tag').exists('DenaliTag can render without a state set');\n      this.set('state', 'disabled');\n      assert.dom('span.tag').hasClass('is-disabled', 'DenaliTag can be set disabled by setting the `@state` arg to `disabled`');\n      this.set('state', 'active');\n      assert.dom('span.tag').hasClass('is-active', 'DenaliTag can be set active by setting the `@state` arg to `active`');\n    });\n    (0, _qunit.test)('outlined', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTag @isOutlined={{this.outlined}}>\n              Inner Content\n            </DenaliTag>\n          \n      */\n      {\n        id: \"trjv8M+h\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@isOutlined\\\"],[[32,0,[\\\"outlined\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.tag').doesNotHaveClass('outlined', 'DenaliTag is not outlined by default');\n      this.set('outlined', true);\n      assert.dom('span.tag').hasClass('outlined', 'DenaliTag can be outlined by setting the `@isOutlined` arg to true');\n    });\n    (0, _qunit.test)('small', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTag @isSmall={{this.isSmall}}>\n              Inner Content\n            </DenaliTag>\n          \n      */\n      {\n        id: \"cZ1MG2zu\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@isSmall\\\"],[[32,0,[\\\"isSmall\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.tag').doesNotHaveClass('is-small', 'DenaliTag is not small by default');\n      this.set('isSmall', true);\n      assert.dom('span.tag').hasClass('is-small', 'DenaliTag can be made smaller by setting the `@isSmall` arg to true');\n    });\n    (0, _qunit.test)('icons', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTag\n              @iconFront={{this.iconFront}}\n              @iconBack={{this.iconBack}}\n            >Tag Content</DenaliTag>\n          \n      */\n      {\n        id: \"DmcHQJEt\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@iconFront\\\",\\\"@iconBack\\\"],[[32,0,[\\\"iconFront\\\"]],[32,0,[\\\"iconBack\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Tag Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.tag').doesNotHaveClass('has-icon-front', 'DenaliTag does not have the `has-icon-front` class by default');\n      assert.dom('span.tag').doesNotHaveClass('has-icon-back', 'DenaliTag does not have the `has-icon-back` class by default');\n      this.set('iconFront', 'check');\n      assert.dom('span.tag').hasClass('has-icon-front', 'DenaliTag has the `has-icon-front` class when iconFront is specified');\n      assert.dom('span.tag .d-icon').hasClass('d-check', 'DenaliTag has the specified icon in the front'); // unset the front icon to check the back icon\n\n      this.set('iconFront', undefined);\n      this.set('iconBack', 'close');\n      assert.dom('span.tag').hasClass('has-icon-back', 'DenaliTag has the `has-icon-back` class when iconBack is specified');\n      assert.dom('span.tag .d-icon').hasClass('d-close', 'test');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-title-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | denali-title', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliTitle />\n      */\n      {\n        id: \"Viyhl0aT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-title\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('div.title').exists('DenaliTitle can render.');\n    });\n    (0, _qunit.test)('it renders with a title argument', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliTitle @title={{this.title}} />\n      */\n      {\n        id: \"S6BpDGHN\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-title\\\",[],[[\\\"@title\\\"],[[32,0,[\\\"title\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('title', 'My Title');\n      assert.dom('span').hasClass('bar', 'DenaliTitle has a bar.');\n      assert.dom('div.title-text').exists('DenaliTitle has a title-text class.');\n      assert.dom('h3').hasTextContaining('My Title', 'DenaliTitle renders a title using an argument.');\n    });\n    (0, _qunit.test)('it renders with a caption argument', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliTitle @title={{this.title}} @caption={{this.caption}} />\n      */\n      {\n        id: \"cY/xB2ES\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-title\\\",[],[[\\\"@title\\\",\\\"@caption\\\"],[[32,0,[\\\"title\\\"]],[32,0,[\\\"caption\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('caption', 'My Caption');\n      assert.dom('h6').doesNotExist('DenaliTitle does not render a caption without a title.');\n      this.set('title', 'My Title');\n      assert.dom('h6').hasTextContaining('My Caption', 'DenaliTitle renders a caption using an argument.');\n    });\n    (0, _qunit.test)('it renders with block components', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTitle as |Title|>\n              <Title.h1>\n                {{this.h1}}\n              </Title.h1>\n              <Title.h2>\n                {{this.h2}}\n              </Title.h2>\n              <Title.h3>\n                {{this.h3}}\n              </Title.h3>\n              <Title.h4>\n                {{this.h4}}\n              </Title.h4>\n              <Title.h5>\n                {{this.h5}}\n              </Title.h5>\n              <Title.h6>\n                {{this.h6}}\n              </Title.h6>\n            </DenaliTitle>\n          \n      */\n      {\n        id: \"VYjbRo73\",\n        block: \"{\\\"symbols\\\":[\\\"Title\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-title\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h1\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h1\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h2\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h2\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h3\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h3\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h4\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h4\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h5\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h5\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h6\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h6\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('h1', 'My H1');\n      assert.dom('h1').hasText('My H1', 'DenaliTitle renders block content for h1.');\n      this.set('h2', 'My H2');\n      assert.dom('h2').hasText('My H2', 'DenaliTitle renders block content for h2.');\n      this.set('h3', 'My H3');\n      assert.dom('h3').hasText('My H3', 'DenaliTitle renders block content for h3.');\n      this.set('h4', 'My H4');\n      assert.dom('h4').hasText('My H4', 'DenaliTitle renders block content for h4.');\n      this.set('h5', 'My H5');\n      assert.dom('h5').hasText('My H5', 'DenaliTitle renders block content for h5.');\n      this.set('h6', 'My H6');\n      assert.dom('h6').hasText('My H6', 'DenaliTitle renders block content for h6.');\n    });\n    (0, _qunit.test)('it supports a wide bar', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTitle @hasWideBar={{this.hasWideBar}} as |Title|>\n              <Title.h1>\n                {{this.title}}\n              </Title.h1>\n              <Title.Caption>\n                {{this.caption}}\n              </Title.Caption>\n            </DenaliTitle>\n          \n      */\n      {\n        id: \"9Jd/hdGi\",\n        block: \"{\\\"symbols\\\":[\\\"Title\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-title\\\",[],[[\\\"@hasWideBar\\\"],[[32,0,[\\\"hasWideBar\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h1\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Caption\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"caption\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('hasWideBar', true);\n      assert.dom('span.bar').hasClass('is-wide', 'DenaliTitle has a wide bar.');\n    });\n    (0, _qunit.test)('it supports statuses for bar', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliTitle @backgroundStatus={{this.backgroundStatus}} />\n          \n      */\n      {\n        id: \"Qw2fSNGU\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-title\\\",[],[[\\\"@backgroundStatus\\\"],[[32,0,[\\\"backgroundStatus\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('span.bar').exists('DenaliTitle can render without a backgroundStatus set');\n      this.set('backgroundStatus', 'danger');\n      assert.dom('span.bar').hasClass('has-bg-status-danger', 'DenaliTitle has background status of danger when `@backgroundStatus` arg is set to danger');\n      this.set('backgroundStatus', 'warning');\n      assert.dom('span.bar').hasClass('has-bg-status-warning', 'DenaliTitle has background status of warning when `@backgroundStatus` arg is set to warning');\n      this.set('backgroundStatus', 'success');\n      assert.dom('span.bar').hasClass('has-bg-status-success', 'DenaliTitle has background status of success when `@backgroundStatus` arg is set to success');\n      this.set('backgroundStatus', 'info');\n      assert.dom('span.bar').hasClass('has-bg-status-info', 'DenaliTitle has background status of info when `@backgroundStatus` arg is set to info');\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-title/heading-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const templates = Object.entries({\n    h1: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H1 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H1>\n      \n    */\n    {\n      id: \"i6eJZflN\",\n      block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h1\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n      meta: {}\n    }),\n    h2: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H2 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H2>\n      \n    */\n    {\n      id: \"z/i/9/WK\",\n      block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h2\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n      meta: {}\n    }),\n    h3: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H3 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H3>, \n      \n    */\n    {\n      id: \"WFkIuu86\",\n      block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h3\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\", \\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n      meta: {}\n    }),\n    h4: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H4 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H4>\n      \n    */\n    {\n      id: \"2K7dZFs6\",\n      block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h4\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n      meta: {}\n    }),\n    h5: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H5 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H5>\n      \n    */\n    {\n      id: \"5pUqlBea\",\n      block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h5\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n      meta: {}\n    }),\n    h6: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H6 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H6>\n      \n    */\n    {\n      id: \"8UQnNeBa\",\n      block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h6\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n      meta: {}\n    })\n  });\n  (0, _qunit.module)('Integration | Component | denali-title/headings', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      for (const [heading, template] of templates) {\n        await (0, _testHelpers.render)(template);\n        this.set('title', 'My Title');\n        assert.dom(heading).hasText('My Title', `DenaliTitle::${heading.toUpperCase()} can render.`);\n      }\n    });\n    (0, _qunit.test)('it supports regular style', async function (assert) {\n      for (const [heading, template] of templates) {\n        await (0, _testHelpers.render)(template);\n        this.set('title', 'My Title');\n        this.set('isRegular', undefined);\n        assert.dom(heading).doesNotHaveClass('is-regular', `Denali::${heading.toUpperCase()} does not have regular styling by default`);\n        this.set('isRegular', 'true');\n        assert.dom(heading).hasClass('is-regular', `Denali::${heading.toUpperCase()} has regular styling when @isRegular arg is set to true`);\n      }\n    });\n    (0, _qunit.test)('it supports upper casing', async function (assert) {\n      for (const [heading, template] of templates) {\n        await (0, _testHelpers.render)(template);\n        this.set('title', 'My Title');\n        this.set('isUpperCase', undefined);\n        assert.dom(heading).doesNotHaveClass('upper', `Denali::${heading.toUpperCase()} does not have upper case styling by default`);\n        this.set('isUpperCase', 'true');\n        assert.dom(heading).hasClass('upper', `Denali::${heading.toUpperCase()} has upper case styling when @isUpperCase arg is set to true`);\n      }\n    });\n    (0, _qunit.test)('it supports statuses', async function (assert) {\n      for (const [heading, template] of templates) {\n        await (0, _testHelpers.render)(template);\n        this.set('title', 'My Title');\n        this.set('status', undefined);\n        assert.dom(heading).exists(`DenaliTitle::${heading.toUpperCase()} can render without a status set`);\n        this.set('status', 'danger');\n        assert.dom(heading).hasClass('is-status-danger', `DenaliTitle::${heading.toUpperCase()} has status of danger when @status arg is set to danger`);\n        this.set('status', 'warning');\n        assert.dom(heading).hasClass('is-status-warning', `DenaliTitle::${heading.toUpperCase()} has status of warning when @status arg is set to warning`);\n        this.set('status', 'success');\n        assert.dom(heading).hasClass('is-status-success', `DenaliTitle::${heading.toUpperCase()} has status of success when @status arg is set to success`);\n        this.set('status', 'info');\n        assert.dom(heading).hasClass('is-status-info', `DenaliTitle::${heading.toUpperCase()} has status of info when @status arg is set to info`);\n      }\n    });\n  });\n});","define(\"dummy/tests/integration/components/denali-toggle-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const option = {\n    text: 'Item 1'\n  };\n  (0, _qunit.module)('Integration | Component | denali-toggle', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it requires options', async function (assert) {\n      assert.expect(1);\n      (0, _testHelpers.setupOnerror)(function ({\n        message\n      }) {\n        assert.equal(message, 'Failed prop type: The prop `options` is marked as required in `DenaliToggleComponent`, but its value is `undefined`.', 'If @args() contains a PropType validator, an error will be thrown if the value is incorrect');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <DenaliToggle />\n      */\n      {\n        id: \"/pIp6aCD\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-toggle\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n    });\n    (0, _qunit.test)('it renders an option string', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliToggle @options={{array \"Item 1\"}} as |option|>\n              {{option}}\n            </DenaliToggle>\n          \n      */\n      {\n        id: \"BVFsqqTp\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\"],[[30,[36,0],[\\\"Item 1\\\"],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"array\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('ul').exists('DenaliToggle renders a list.');\n      assert.dom('li').hasText('Item 1', 'DenaliToggle option exists and renders text.');\n    });\n    (0, _qunit.test)('it renders an option object', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliToggle @options={{array (hash text=\"Item 1\")}} as |option|>\n              {{option.text}}\n            </DenaliToggle>\n          \n      */\n      {\n        id: \"+ZWecQCr\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\"],[[30,[36,1],[[30,[36,0],null,[[\\\"text\\\"],[\\\"Item 1\\\"]]]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"hash\\\",\\\"array\\\"]}\",\n        meta: {}\n      }));\n      assert.dom('ul').exists('DenaliToggle renders a list.');\n      assert.dom('li').hasText('Item 1', 'DenaliToggle option exists and renders an object.');\n    });\n    (0, _qunit.test)('an option is active', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliToggle @options={{this.options}} @activeOption={{this.activeOption}} as |option|>\n              {{option.text}}\n            </DenaliToggle>\n          \n      */\n      {\n        id: \"zdQLOWGD\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@activeOption\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"activeOption\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', [option]);\n      assert.dom('li').doesNotHaveClass('is-active', 'DenaliToggle options are not active by default');\n      this.set('activeOption', option);\n      assert.dom('li').hasClass('is-active', 'DenaliToggle option is active when `@activeOption` arg is set');\n    });\n    (0, _qunit.test)('an option is disabled', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliToggle @options={{this.options}} @disabledOptions={{this.disabled}} as |option|>\n              {{option.text}}\n            </DenaliToggle>\n          \n      */\n      {\n        id: \"t+O0Bux7\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@disabledOptions\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', [option]);\n      assert.dom('li').doesNotHaveClass('is-disabled', 'DenaliToggle options are not disabled by default');\n      this.set('disabled', [option]);\n      assert.dom('li').hasClass('is-disabled', 'DenaliToggle option is disabled when `@isDisabled` arg is set to true');\n    });\n    (0, _qunit.test)('it supports small size', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliToggle @options={{this.options}} @isSmall={{this.isSmall}} as |option|>\n              {{option.text}}\n            </DenaliToggle>\n          \n      */\n      {\n        id: \"8q1bsG/8\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@isSmall\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"isSmall\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', [option]);\n      assert.dom('.toggle').doesNotHaveClass('is-small', 'DenaliToggle does not have small styling by default');\n      this.set('isSmall', 'true');\n      assert.dom('.toggle').hasClass('is-small', 'DenaliToggle has a small size when `@isSmall` arg is set to true');\n    });\n    (0, _qunit.test)('it supports inverse colors', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliToggle @options={{this.options}} @isInverse={{this.isInverse}} as |option|>\n              {{option.text}}\n            </DenaliToggle>\n          \n      */\n      {\n        id: \"1cLLkgyl\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@isInverse\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', [option]);\n      assert.dom('.toggle').doesNotHaveClass('is-inverse', 'DenaliToggle does not have inverse styling by default');\n      this.set('isInverse', 'true');\n      assert.dom('.toggle').hasClass('is-inverse', 'DenaliToggle has inverse styling when `@isInverse` arg is set to true');\n    });\n    (0, _qunit.test)('it handles change events', async function (assert) {\n      assert.expect(4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <DenaliToggle\n              @options={{this.options}}\n              @activeOption={{this.activeOption}}\n              @disabledOptions={{this.disabled}}\n              @onChange={{this.changeActive}} as |option|>\n              {{option.text}}\n            </DenaliToggle>\n          \n      */\n      {\n        id: \"fVpW8v8/\",\n        block: \"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@activeOption\\\",\\\"@disabledOptions\\\",\\\"@onChange\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"activeOption\\\"]],[32,0,[\\\"disabled\\\"]],[32,0,[\\\"changeActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      this.set('options', [{\n        text: 'Item 1'\n      }, {\n        text: 'Item 2'\n      }, {\n        text: 'Item 3'\n      }]);\n      this.set('activeOption', this.options[2]);\n      assert.dom('li:nth-child(3)').hasClass('is-active', 'The third option is active');\n      this.set('changeActive', option => {\n        this.set('activeOption', option);\n        assert.equal(option.text, 'Item 2', 'the second option is clicked');\n      });\n      await (0, _testHelpers.click)('li:nth-child(2)');\n      assert.dom('li:nth-child(2)').hasClass('is-active', 'The element is active after being clicked');\n      this.set('disabled', [this.options[0]]);\n      this.set('changeActive', () => {\n        assert.notOk(true, '`@onChange` should not be called when option is disabled');\n      });\n      await (0, _testHelpers.click)('li:nth-child(1)');\n      assert.dom('li:nth-child(2)').hasClass('is-active', 'The original element is still active after being clicked');\n    });\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjljlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnvvnnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnvvhtLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}